---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: k8s-ai-controller
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.6.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 1
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: false
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    serviceAccount:
      create: false
      name: k8s-ai-controller
    controllers:
      k8s-ai-controller:
        initContainers:
          setup-tools:
            image:
              repository: debian
              tag: bookworm-slim
            command:
              - /bin/bash
              - -c
              - |
                set -e
                echo "===== Starting tool installation ====="

                # Create shared directory structure
                echo "Creating shared directories..."
                mkdir -p /shared/bin
                mkdir -p /shared/lib/node_modules
                ls -la /shared/
                ls -la /shared/bin || echo "/shared/bin does not exist"

                # Update package lists
                apt-get update

                # Install base tools
                echo "Installing base tools..."
                apt-get install -y \
                  curl \
                  wget \
                  ca-certificates \
                  gnupg \
                  git \
                  jq \
                  unzip \
                  zsh \
                  vim \
                  nano \
                  procps \
                  htop

                # Install kubectl
                echo "Installing kubectl..."
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                chmod +x kubectl
                mv kubectl /shared/bin/

                # Install flux CLI
                echo "Installing flux CLI..."
                curl -s https://fluxcd.io/install.sh | bash
                cp /usr/local/bin/flux /shared/bin/

                # Install GitHub CLI
                echo "Installing GitHub CLI..."
                mkdir -p /etc/apt/keyrings
                wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
                chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
                apt-get update
                apt-get install -y gh
                cp /usr/bin/gh /shared/bin/

                # Install Node.js for MCP server
                echo "Installing Node.js..."
                mkdir -p /etc/apt/keyrings
                curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
                echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
                apt-get update
                apt-get install -y nodejs

                # Install Python and uv
                echo "Installing Python and uv..."
                apt-get install -y python3 python3-pip python3-venv
                pip3 install --break-system-packages uv

                # Install MCP servers
                echo "Installing MCP servers..."
                npm install -g --prefix /shared \
                  @modelcontextprotocol/server-kubernetes \
                  @modelcontextprotocol/server-github \
                  @modelcontextprotocol/server-filesystem \
                  @upstash/context7-mcp \
                  prometheus-mcp

                # Copy binaries to shared
                echo "Copying binaries..."
                cp /usr/bin/node /shared/bin/
                cp /usr/bin/zsh /shared/bin/
                cp /usr/bin/git /shared/bin/
                cp /usr/bin/jq /shared/bin/
                cp /usr/bin/vim /shared/bin/
                cp /usr/bin/nano /shared/bin/
                cp /usr/bin/htop /shared/bin/ || true

                # Copy Python and pip
                cp /usr/bin/python3 /shared/bin/python
                cp /usr/bin/python3 /shared/bin/python3
                cp /usr/local/bin/uv /shared/bin/ || cp /usr/bin/uv /shared/bin/ || true

                # Create npm/npx wrappers
                echo "Creating wrapper scripts..."
                printf '#!/bin/sh\nexport NODE_PATH="/shared/lib/node_modules"\nexec /shared/bin/node /shared/lib/node_modules/npm/bin/npm-cli.js "$@"\n' > /shared/bin/npm
                chmod +x /shared/bin/npm

                printf '#!/bin/sh\nexport NODE_PATH="/shared/lib/node_modules"\nexec /shared/bin/node /shared/lib/node_modules/npm/bin/npx-cli.js "$@"\n' > /shared/bin/npx
                chmod +x /shared/bin/npx

                # Setup zsh
                echo "Setting up zsh..."
                cp /etc/zsh/zshrc /shared/ || echo "# ZSH config" > /shared/zshrc

                echo "===== Tool installation complete ====="
                ls -la /shared/bin/
                /shared/bin/kubectl version --client
                /shared/bin/flux version
                /shared/bin/gh version
                /shared/bin/node --version
                /shared/bin/git --version
                /shared/bin/zsh --version
        containers:
          app:
            image:
              repository: ghcr.io/open-webui/mcpo
              tag: git-44ce6d0
            env:
              - name: PATH
                value: "/shared/bin:/app/.venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
              - name: NODE_PATH
                value: "/shared/lib/node_modules"
              - name: PORT
                value: "8000"
              - name: API_KEY
                valueFrom:
                  secretKeyRef:
                    name: k8s-ai-controller-api-key
                    key: api-key
              - name: GITHUB_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: k8s-ai-controller-api-key
                    key: github-token
              - name: KUBERNETES_SERVICE_HOST
                value: "kubernetes.default.svc"
              - name: KUBERNETES_SERVICE_PORT
                value: "443"
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
              startup:
                enabled: true
            args:
              - "--port"
              - "8000"
              - "--api-key"
              - "$(API_KEY)"
              - "--config"
              - "/config/config.json"
              - "--hot-reload"
            securityContext:
              runAsNonRoot: false
              runAsUser: 0

    service:
      main:
        controller: k8s-ai-controller
        type: ClusterIP
        ports:
          http:
            protocol: TCP
            enabled: true
            port: 8000
            targetPort: 8000

    ingress:
      main:
        enabled: true
        className: internal
        hosts:
          - host: k8s-ai-controller.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: main
                  port: http
        tls:
          - hosts:
              - k8s-ai-controller.${SECRET_DOMAIN}

    persistence:
      config:
        type: configMap
        name: k8s-ai-controller-config
        advancedMounts:
          k8s-ai-controller:
            app:
              - path: /config/config.json
                subPath: config.json
                readOnly: true
      runtime-tools:
        type: emptyDir
        sizeLimit: 2Gi
        advancedMounts:
          k8s-ai-controller:
            app:
              - path: /shared
            setup-tools:
              - path: /shared
      workspace:
        type: persistentVolumeClaim
        accessMode: ReadWriteOnce
        size: 10Gi
        storageClass: longhorn
        advancedMounts:
          k8s-ai-controller:
            app:
              - path: /workspace
