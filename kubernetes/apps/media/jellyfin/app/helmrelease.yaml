---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/common-3.2.0/charts/library/common/values.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: jellyfin
  namespace: media
spec:
  interval: 30m
  timeout: 30s
  chart:
    spec:
      chart: jellyfin
      version: 2.1.0
      sourceRef:
        kind: HelmRepository
        name: jellyfin
        namespace: flux-system
  maxHistory: 1
  install:
    remediation:
      retries: 1
  upgrade:
    cleanupOnFail: true
    force: false
    remediation:
      retries: 1
      remediateLastFailure: true
    timeout: 30s
  uninstall:
    keepHistory: false
  values:
      # Default values for Jellyfin.
    # This is a YAML-formatted file.

    # -- Number of Jellyfin replicas to start. Should be left at 1.
    replicaCount: 1

    # -- Image pull secrets to authenticate with private repositories.
    # See: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    imagePullSecrets: []

    image:
      # -- Container image repository for Jellyfin.
      repository: docker.io/jellyfin/jellyfin
      # -- Jellyfin container image tag. Leave empty to automatically use the Chart's app version.
      tag: "latest"
      # -- Image pull policy (Always, IfNotPresent, or Never).
      pullPolicy: IfNotPresent

    # -- Override the default name of the chart.
    nameOverride: ""
    # -- Override the default full name of the chart.
    fullnameOverride: ""

    # -- Service account configuration. See: https://kubernetes.io/docs/concepts/security/service-accounts/
    serviceAccount:
      # -- Specifies whether to create a service account.
      create: true
      # -- Automatically mount API credentials for the service account.
      automount: true
      # -- Annotations for the service account.
      annotations: {}
      # -- Custom name for the service account. If left empty, the name will be autogenerated.
      name: ""

    # -- Annotations to add to the pod.
    podAnnotations: {}
    # -- Additional labels to add to the pod.
    podLabels: {}

    # -- Security context for the pod.
    podSecurityContext:
      privileged: true
      capabilities:
        add:
          - SYS_ADMIN
        allowPrivilegeEscalation: true
      runAsUser: 0
      runAsGroup: 0
      fsGroup: 0

      # runAsUser: 1000
      # runAsGroup: 1000
      # runAsUser: 1000
      # runAsGroup: 1000
      # fsGroup: 1000
      # supplementalGroups:
      #   - 44  # video group
      #   - 109 # render group

    # -- Security context for the container.
    securityContext:
      privileged: true
      capabilities:
        add:
          - SYS_ADMIN
        allowPrivilegeEscalation: true
      runAsUser: 0
      runAsGroup: 0
      fsGroup: 0

      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000

    # -- Define a custom runtimeClassName for the pod.
    runtimeClassName: ''

    # -- Deployment strategy configuration. See `kubectl explain deployment.spec.strategy`.
    deploymentStrategy:
      type: Recreate

    service:
      # -- Service type (ClusterIP, NodePort, or LoadBalancer).
      type: ClusterIP
      # -- Configure dual-stack IP family policy. See: https://kubernetes.io/docs/concepts/services-networking/dual-stack/
      ipFamilyPolicy: ""
      # -- Supported IP families (IPv4, IPv6).
      ipFamilies: []
      # -- Specific IP address for the LoadBalancer.
      loadBalancerIP: ""
      # -- Class of the LoadBalancer.
      loadBalancerClass: ""
      # -- Source ranges allowed to access the LoadBalancer.
      loadBalancerSourceRanges: []
      # -- Port for the Jellyfin service.
      port: 8096
      # -- Name of the port in the service.
      portName: service
      # -- Annotations for the service.
      annotations: {}
      # -- Labels for the service.
      labels: {}
      # -- External traffic policy (Cluster or Local).
      # externalTrafficPolicy: Cluster
      # -- NodePort for the service (if applicable).
      # nodePort:

    # -- Ingress configuration. See: https://kubernetes.io/docs/concepts/services-networking/ingress/
    ingress:
      enabled: true
      className: "internal"
      annotations:
        # kubernetes.io/ingress.class: nginx
        external-dns.alpha.kubernetes.io/target: "jellyfin.${SECRET_DOMAIN}"
      hosts:
        - host: &host "jellyfin.${SECRET_DOMAIN}"
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls:
        - hosts:
            - *host

    # -- Resource requests and limits for the Jellyfin container.
    resources:
      requests:
        cpu: 100m
        memory: 250Mi
        gpu.intel.com/i915: 1
      limits:
        memory: 8Gi
        gpu.intel.com/i915: 1

    # -- Configure liveness probe for Jellyfin.
    livenessProbe:
      initialDelaySeconds: 10
      tcpSocket:
        port: http
      # successThreshold: 1
      # failureThreshold: 3
      # timeoutSeconds: 1
      # periodSeconds: 10

    # -- Configure readiness probe for Jellyfin.
    readinessProbe:
      initialDelaySeconds: 10
      tcpSocket:
        port: http
      # successThreshold: 1
      # failureThreshold: 3
      # timeoutSeconds: 1
      # periodSeconds: 10

    # -- Additional volumes to mount in the Jellyfin pod.
    volumes: []
    # - name: foo
    #   secret:
    #     secretName: mysecret
    #     optional: false

    # -- Additional volume mounts for the Jellyfin container.
    volumeMounts: []
    # - name: foo
    #   mountPath: "/etc/foo"
    #   readOnly: true

    # -- Node selector for pod scheduling.
    nodeSelector: {}

    # -- Tolerations for pod scheduling.
    tolerations: []

    # -- Affinity rules for pod scheduling.
    affinity: {}

    jellyfin:
      # -- Enable DLNA. Requires host network. See: https://jellyfin.org/docs/general/networking/dlna.html
      enableDLNA: false
      # -- Custom command to use as container entrypoint.
      command: []
      # -- Additional arguments for the entrypoint command.
      args: []
      # -- Additional environment variables for the container.
      env:
#        - name: JELLYFIN_PublishedServerUrl
#          value: "https://jellyfin.${SECRET_DOMAIN}"
        - name: JELLYFIN_FFmpeg__EnableHardwareEncoding
          value: "true"
        - name: JELLYFIN_FFmpeg__EnableVAAPI
          value: "true"
        - name: JELLYFIN_FFmpeg__VAAPIDevice
          value: "/dev/dri/renderD128"
        - name: JELLYFIN_FFmpeg__EnableIntelVaapiLowPowerH264
          value: "true"
        - name: JELLYFIN_FFmpeg__EnableIntelVaapiLowPowerHevc
          value: "true"
        - name: JELLYFIN_FFmpeg__EnableVaapiCopy
          value: "true"
        - name: JELLYFIN_FFmpeg__EnableIntelVaapiVp9
          value: "true"

    persistence:
      config:
        # -- set to false to use emptyDir
        enabled: true
        accessMode: ReadWriteOnce
        size: 5Gi
        # -- Custom annotations to be added to the PVC
        annotations: {}
        # -- If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner.
        #storageClass: 'local-hostpath'
        ## -- Use an existing PVC for this mount
        existingClaim: 'jellyfin-config-smb'
      media:
        # -- set to false to use emptyDir
        enabled: true
        accessMode: ReadWriteOnce
        size: 25Gi
        # -- Custom annotations to be added to the PVC
        annotations: {}
        # -- If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner.
        #storageClass: 'local-hostpath'
        ## -- Use an existing PVC for this mount
        existingClaim: 'jellyfin-media-smb'

    # -- Configuration for metrics collection and monitoring
    metrics:
      # -- Enable or disable metrics collection - Ensure you have started and configured your Jellyfin instance first as this will fail if system.xml does not exist yet.
      enabled: false
      command:
        - bash
        - '-c'
        - >-
          sed 's,<EnableMetrics>false</EnableMetrics>,<EnableMetrics>true</EnableMetrics>,' -i /config/config/system.xml &&
          /jellyfin/jellyfin
      # -- Configuration for the Prometheus ServiceMonitor
      serviceMonitor:
        # -- Enable or disable the creation of a ServiceMonitor resource
        enabled: true
        # -- Namespace where the ServiceMonitor resource should be created. Defaults to Release.Namespace
        namespace: ''
        # -- Labels to add to the ServiceMonitor resource
        labels: {}
        # -- Interval at which metrics should be scraped
        interval: 1m
        # -- Timeout for scraping metrics
        scrapeTimeout: 30s
        # -- Path to scrape for metrics
        path: /metrics
        # -- Scheme to use for scraping metrics (http or https)
        scheme: http
        # -- TLS configuration for scraping metrics
        tlsConfig: {}
        # -- Relabeling rules for the scraped metrics
        relabelings: []
        # -- Relabeling rules for the metrics before ingestion
        metricRelabelings: []
        # -- Target labels to add to the scraped metrics
        targetLabels: []

    # -- additional init containers to run inside the pod.
    extraInitContainers: []


    extraVolumes:
      - name: dev-dri
        hostPath:
          path: /dev/dri

    extraVolumeMounts:
      - name: dev-dri
        mountPath: /dev/dri


    # -- additional sidecar containers to run inside the pod .
    #extraContainers: []

    # Hardware acceleration volumes
    #extraVolumes: []
      # - name: media
      #   hostPath:
      #     path: /media
      #     type: DirectoryOrCreate
      #     persistentVolumeClaim:
      #       claimName: jellyfin-media-smb

    # extraVolumeMounts:
    #   - name: dri
    #     mountPath: /dev/dri
    #   - name: smb-media
    #     mountPath: /smb-media

#    strategy:
#      type: Recreate    # Important for single GPU
